Разбор задачи «Система продажи билетов на поезда»
Есть n купе, пронумерованных от 1 до n, в каждом купе два места, поступают запросы трех видов:

1) Занять место, если оно еще не занято.
2) Освободить место, если оно занято.
3) Занять купе с наименьшим номером, в котором все места свободны.

Если в купе освободили все места — то оно также считается свободным.

Решение.

Собственно решим задачу сначала только для обычных мест (без купе). 
Для решения этой задачи давайте заведем словарь для мест — где для каждого 
места запомним свободно оно или нет. Для первого запроса мы просто проверим 
занято место и если нет, пометим занятым. Для второго же запроса мы 
наоборот проверим занято ли место и если да, пометим его незанятым.

Для обработки купе заведем структуру, которая позволяет удалять 
произвольный элемент, находить минимальный элемент и вставлять — 
по таким критериям подходит любое балансирующее дерево или 
правильная куча, поддерживающая удаление произвольного элемента.

Пример подходящей структуры
SortedSet в C#, sortedSetOf в Kotlin.

На запросы третьего типа мы теперь просто ищем минимум в нашей структуре
и помечаем места в словаре занятыми. Также теперь нам требуется 
дополнительно реализовать в запросах первого и второго типа обработку 
проверки: забронировали купе или его освободили (это можно делать даже 
в наивную просто проверяя оба места из купе).

Время работы и памяти
Для каждого запроса мы требуем O(\log(places)) времени (поиск/удаление/вставка в 
выбранную нами структуру или словарь), итого суммарное время работы — O(q_{sum} \cdot \log(places)), 
где q_{sum} — суммарное количество запросов.

Также нам требуется O(places) дополнительной памяти для хранения всех мест и всех купе.